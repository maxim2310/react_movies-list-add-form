{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","regex","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","titleError","setTitleError","descriptionError","setDescriptionError","imgUrlError","setImgUrlError","imdbUrlError","setImdbUrlError","imdbIdError","setImdbIdError","checkedUrl","url","test","onSubmit","event","preventDefault","type","classNames","placeholder","value","onChange","target","trim","onBlur","id","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57dfec7a.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\ninterface Movie {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n}\n\nconst regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [imgUrlError, setImgUrlError] = useState(false);\n  const [imdbUrlError, setImdbUrlError] = useState(false);\n  const [imdbIdError, setImdbIdError] = useState(false);\n\n  const resetInput = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const resetError = () => {\n    setTitleError(false);\n    setDescriptionError(false);\n    setImgUrlError(false);\n    setImdbUrlError(false);\n    setImdbIdError(false);\n  };\n\n  const checkedUrl = (url: string) => regex.test(url);\n\n  const isButtonDisabled = () => {\n    if (title && imdbId && checkedUrl(imgUrl) && checkedUrl(imdbUrl)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const onSubmitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    resetInput();\n    resetError();\n  };\n\n  return (\n    <form\n      onSubmit={onSubmitForm}\n    >\n      <label>\n        Title\n        <input\n          type=\"text\"\n          className={classNames(\n            'input',\n            { 'input--error': titleError && !title },\n          )}\n          placeholder=\"Plz enter a title\"\n          value={title}\n          onChange={event => setTitle(event.target.value.trim())}\n          onBlur={() => {\n            if (!title) {\n              setTitleError(true);\n            }\n          }}\n        />\n      </label>\n\n      <p\n        className={classNames(\n          'message',\n          { 'message--error': titleError && !title },\n        )}\n      >\n        {titleError && !title && 'required'}\n      </p>\n\n      <label>\n        Description\n        <input\n          type=\"text\"\n          className={classNames(\n            'input',\n            { 'input--error': descriptionError && !description },\n          )}\n          placeholder=\"Plz enter a description\"\n          value={description}\n          onChange={event => setDescription(event.target.value.trim())}\n          onBlur={() => {\n            if (!description) {\n              setDescriptionError(true);\n            }\n          }}\n        />\n      </label>\n\n      <p\n        className={classNames(\n          'message',\n          { 'message--error': descriptionError && !description },\n        )}\n      >\n        {descriptionError && !description && 'required'}\n      </p>\n\n      <label>\n        Image Url\n        <input\n          type=\"text\"\n          className={classNames(\n            'input',\n            { 'input--error': imgUrlError && !checkedUrl(imgUrl) },\n          )}\n          placeholder=\"Plz enter a imgUrl\"\n          id=\"imgUrl\"\n          value={imgUrl}\n          onChange={event => setImgUrl(event.target.value.trim())}\n          onBlur={() => {\n            if (!checkedUrl(imgUrl)) {\n              setImgUrlError(true);\n            }\n          }}\n        />\n      </label>\n\n      <p\n        className={classNames(\n          'message',\n          { 'message--error': imgUrlError && !checkedUrl(imgUrl) },\n        )}\n      >\n        {imgUrlError && !checkedUrl(imgUrl) && 'required URL'}\n      </p>\n\n      <label>\n        Imdb Url\n        <input\n          type=\"text\"\n          className={classNames(\n            'input',\n            { 'input--error': imdbUrlError && !checkedUrl(imdbUrl) },\n          )}\n          placeholder=\"Plz enter a imdbUrl\"\n          value={imdbUrl}\n          id=\"imdbUrl\"\n          onChange={event => setImdbUrl(event.target.value.trim())}\n          onBlur={() => {\n            if (!checkedUrl(imdbUrl)) {\n              setImdbUrlError(true);\n            }\n          }}\n        />\n      </label>\n\n      <p\n        className={classNames(\n          'message',\n          { 'message--error': imdbUrlError && !checkedUrl(imdbUrl) },\n        )}\n      >\n        {imdbUrlError && !checkedUrl(imdbUrl) && 'required URL'}\n      </p>\n\n      <label>\n        Imdb ID\n        <input\n          type=\"text\"\n          className={classNames(\n            'input',\n            { 'input--error': imdbIdError && !imdbId },\n          )}\n          placeholder=\"Plz enter a imdbId\"\n          value={imdbId}\n          onChange={event => setImdbId(event.target.value)}\n          onBlur={() => {\n            if (!imdbId) {\n              setImdbIdError(true);\n            }\n          }}\n        />\n      </label>\n\n      <p\n        className={classNames(\n          'message',\n          { 'message--error': imdbIdError && !imdbId },\n        )}\n      >\n        {imdbIdError && !imdbId && 'required'}\n      </p>\n\n      <button\n        type=\"submit\"\n        className=\"button\"\n        disabled={isButtonDisabled()}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}